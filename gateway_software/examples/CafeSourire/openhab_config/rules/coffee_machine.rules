 import java.util.Date
 import java.text.SimpleDateFormat

var String currState = "0"
var String lastState = "0"
//Do not play twice power song but keep state update in rule
var boolean powerSoundOnGoing = false
var boolean setBrewOnGoing = false

rule initialiseCoffeeMachineItems
when System started
then
    CoffeeOnGoing.postUpdate(OFF)
end


rule powerButtonPressRule
when Item CoffeeMachinePowerButton received command
then
	sendCommand(CoffeeMachinePowerButtonPress , ON)
end

rule onStateUpdate
when Item CoffeeMachineStatus received update
then
	lastState = currState
	currState = CoffeeMachineStatus.state.toString()
	
	if(powerSoundOnGoing)
	{
		//Nothing to do
	}
	else
	{
		if(lastState == "0" && currState != "0")
		{
			powerSoundOnGoing  = true
			logInfo("rules", " " + executeCommandLine("./configurations/helper_scripts/play_sound.sh ./sounds/power_on.wav", 1000000))
			powerSoundOnGoing  = false
		}
		else if(lastState != "0" && currState == "0")
		{
			powerSoundOnGoing  = true
			logInfo("rules", " " + executeCommandLine("./configurations/helper_scripts/play_sound.sh ./sounds/power_off.wav", 1000000))
			powerSoundOnGoing  = false
		}
	}
	logInfo("rules", "exited onStateUpdate");
end	

rule onPowerButtonPressRule
when Item OnCoffeeMachinePowerButtonPress received update
then
	var SimpleDateFormat df = new SimpleDateFormat( "dd/MM/YYYY HH:mm:ss" )
    var String Timestamp = df.format( new Date() )
	postUpdate(CoffeeMachinePowerButton, "Last pressed " + Timestamp + " during " + OnCoffeeMachinePowerButtonPress.state.toString() + "ms")
end

rule smallCoffeeButtonPressRule
when Item CoffeeMachineSmallCoffeeButton received command
then
	sendCommand(CoffeeMachineSmallCoffeeButtonPress , ON)
end

rule onSmallCoffeeButtonPressRule
when Item OnCoffeeMachineSmallCoffeeButtonPress received update
then
	var SimpleDateFormat df = new SimpleDateFormat( "dd/MM/YYYY HH:mm:ss" )
    var String Timestamp = df.format( new Date() )
	postUpdate(CoffeeMachineSmallCoffeeButton, "Last pressed " + Timestamp + " during " + OnCoffeeMachineSmallCoffeeButtonPress.state.toString() + "ms")
end

rule coffeeButtonPressRule
when Item CoffeeMachineCoffeeButton received command
then
	sendCommand(CoffeeMachineCoffeeButtonPress , ON)
end

rule onCoffeeButtonPressRule
when Item OnCoffeeMachineCoffeeButtonPress received update
then
	var SimpleDateFormat df = new SimpleDateFormat( "dd/MM/YYYY HH:mm:ss" )
    var String Timestamp = df.format( new Date() )
	postUpdate(CoffeeMachineCoffeeButton, "Last pressed " + Timestamp + " during " + OnCoffeeMachineCoffeeButtonPress.state.toString() + "ms")
end

rule brewButtonPressRule
when Item CoffeeMachineBrewButton received command
then
	sendCommand(CoffeeMachineBrewButtonPress , ON)
end

rule onBrewButtonPressRule
when Item OnCoffeeMachineBrewButtonPress received update
then
	var SimpleDateFormat df = new SimpleDateFormat( "dd/MM/YYYY HH:mm:ss" )
    var String Timestamp = df.format( new Date() )
	postUpdate(CoffeeMachineBrewButton, "Last pressed " + Timestamp + " during " + OnCoffeeMachineBrewButtonPress.state.toString() + "ms")
end

rule SetBrew
when
    Item setBrew received command     
then
    logInfo("rules", "enter")
    if(setBrewOnGoing == 1)
    {
        logInfo("rules", "Brew on going ... exit from rule")
    }
    else
    {
      logInfo("rules", "Set brew to " + receivedCommand.toString())
      setBrewOnGoing = true;
    
      if(CoffeeMachineStatus.state.toString() != "6")
      {
        var index = 0
        var boolean exitLoop = false
        while(index <= 3 && !exitLoop)
        {
          logInfo("rules", "but actual state is " + CoffeeMachineStatus.state.toString())
          sendCommand(CoffeeMachineBrewButtonPress, 1)
          Thread::sleep(5000)
          
          if(CoffeeMachineStatus.state.toString() == "6")
            exitLoop = true
                        
          index = index + 1
        }
    }
    else
    {
        logInfo("rules", "Already to strong")
      }
      setBrewOnGoing = false
    }
    
end

rule DoCustomCoffee //Take a name as parameter
when
    Item doCustomCoffee received command     
then
	var String coffeeType = transform("MAP","custom_coffee.map", receivedCommand.toString())
	var String musicFile = "./sounds/" + transform("MAP","custom_coffee_music.map", receivedCommand.toString())
	
	logInfo("rules", "Set custom coffee to " + receivedCommand.toString() + " - coffee type = " + coffeeType)
	
	if(coffeeType == "COFFEE")
	{
		sendCommand(CoffeeMachineCoffeeButtonPress, ON)
		logInfo("rules", " " + executeCommandLine("./configurations/helper_scripts/play_sound.sh " + musicFile + " -f", 1000000))
	}
	else if(coffeeType == "SMALL_COFFEE")
	{
		sendCommand(CoffeeMachineSmallCoffeeButtonPress, ON)
		logInfo("rules", " " + executeCommandLine("./configurations/helper_scripts/play_sound.sh " + musicFile + " -f", 1000000))
	}
	else
	{
		/** nothing to do */
	}
	CoffeeOnGoing.postUpdate(OFF)
end

rule testRule
when Item testItem received update
then
	logInfo("rules", "testRule - begin")
	if(SqArtist.state != Uninitialized && SqTitle.state != Uninitialized)
	{
		sendCommand(Slack, SqArtist.state + " " + SqTitle.state)
	}
	else
	{
		sendCommand(Slack, "Désolé... le titre de ton kif n'est pas dispo...")
	}
	
	logInfo("rules", "testRule - end")
end
