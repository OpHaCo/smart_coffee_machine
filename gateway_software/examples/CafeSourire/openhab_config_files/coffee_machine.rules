 import java.util.Date
 import java.text.SimpleDateFormat

var String currState = "0"
var String lastState = "0"
//Do not play twice power song but keep state update in rule
var boolean powerSoundOnGoing = false

rule powerButtonPressRule
when Item CoffeeMachinePowerButton received command
then
	sendCommand(CoffeeMachinePowerButtonPress , ON)
end

rule onStateUpdate
when Item CoffeeMachineStatus received update
then
	var String lastTmpState = lastState
	//Update state
	lastState = currState
	currState = CoffeeMachineStatus.state.toString()
		
	if(powerSoundOnGoing)
	{
		//Nothing to do
	}
	else
	{
		if(lastTmpState == "0" && CoffeeMachineStatus.state.toString() != "0")
		{
			powerSoundOnGoing  = true
			logInfo("rules", " " + executeCommandLine("./configurations/helper_scripts/play_sound.sh ./sounds/power_on.wav", 1000000))
			powerSoundOnGoing  = false
		}
		else if(lastTmpState != "0" && CoffeeMachineStatus.state.toString() == "0")
		{
			powerSoundOnGoing  = true
			logInfo("rules", " " + executeCommandLine("./configurations/helper_scripts/play_sound.sh ./sounds/power_off.wav", 1000000))
			powerSoundOnGoing  = false
		}
	}
end	

rule onPowerButtonPressRule
when Item OnCoffeeMachinePowerButtonPress received update
then
	var SimpleDateFormat df = new SimpleDateFormat( "dd/MM/YYYY HH:mm:ss" )
    var String Timestamp = df.format( new Date() )
	postUpdate(CoffeeMachinePowerButton, "Last pressed " + Timestamp + " during " + OnCoffeeMachinePowerButtonPress.state.toString() + "ms")
end

rule smallCoffeeButtonPressRule
when Item CoffeeMachineSmallCoffeeButton received command
then
	sendCommand(CoffeeMachineSmallCoffeeButtonPress , ON)
end

rule onSmallCoffeeButtonPressRule
when Item OnCoffeeMachineSmallCoffeeButtonPress received update
then
	var SimpleDateFormat df = new SimpleDateFormat( "dd/MM/YYYY HH:mm:ss" )
    var String Timestamp = df.format( new Date() )
	postUpdate(CoffeeMachineSmallCoffeeButton, "Last pressed " + Timestamp + " during " + OnCoffeeMachineSmallCoffeeButtonPress.state.toString() + "ms")
end

rule coffeeButtonPressRule
when Item CoffeeMachineCoffeeButton received command
then
	sendCommand(CoffeeMachineCoffeeButtonPress , ON)
end

rule onCoffeeButtonPressRule
when Item OnCoffeeMachineCoffeeButtonPress received update
then
	var SimpleDateFormat df = new SimpleDateFormat( "dd/MM/YYYY HH:mm:ss" )
    var String Timestamp = df.format( new Date() )
	postUpdate(CoffeeMachineCoffeeButton, "Last pressed " + Timestamp + " during " + OnCoffeeMachineCoffeeButtonPress.state.toString() + "ms")
end

rule brewButtonPressRule
when Item CoffeeMachineBrewButton received command
then
	sendCommand(CoffeeMachineBrewButtonPress , ON)
end

rule onBrewButtonPressRule
when Item OnCoffeeMachineBrewButtonPress received update
then
	var SimpleDateFormat df = new SimpleDateFormat( "dd/MM/YYYY HH:mm:ss" )
    var String Timestamp = df.format( new Date() )
	postUpdate(CoffeeMachineBrewButton, "Last pressed " + Timestamp + " during " + OnCoffeeMachineBrewButtonPress.state.toString() + "ms")
end

rule testRule
when Item testItem received update
then
	logInfo("rules", "testRule - begin")
	logInfo("rules", " " + executeCommandLine("./configurations/helper_scripts/play_sound.sh ./sounds/nespresso.mp3", 1000000))
	logInfo("rules", "testRule - end")
end