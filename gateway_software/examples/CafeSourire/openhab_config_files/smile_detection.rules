 import java.util.Date
 import java.text.SimpleDateFormat

var boolean coffeeOnGoing = false

rule SmileDetected
when
    Item SmileDetected received update
then
	if(coffeeOnGoing)
	
	{
		logInfo("rules", "Cannot make coffee - a coffee is already on going")
	}
	else
	{
		coffeeOnGoing = true
	
		var SimpleDateFormat df = new SimpleDateFormat( "dd/MM/YYYY HH:mm:ss" )
	    var String Timestamp = df.format( new Date() )
	    
	    //Play specific hello message depending on user
	    var String userLang = transform("MAP","user_lang.map",SmileDetected.state.toString())
	    var String userWelcomeMsg = transform("MAP","welcome_message.map",SmileDetected.state.toString())
	    logInfo("rules", executeCommandLine("./configurations/helper_scripts/say.sh " + userLang + " " + userWelcomeMsg, 1000000))
	    
	    var String coffeeType = transform("MAP","custom_coffee.map",SmileDetected.state.toString())
	    if(coffeeType == "NO_COFFEE")
	    {
	    	// nothing to do
	    }
	    else
	    {
		    if(SmileDetected.state.toString() != "NA")
		    {
		    	postUpdate(SmileDetectedString, SmileDetected.state.toString() + " smiled at " + Timestamp)
		    }
		    else
		    {
		    	postUpdate(SmileDetectedString, "Smiled detected at " + Timestamp + " - face not recognized")
		    }
			
			// get actual status
			sendCommand(getCoffeeMachineStatus, ON)
			Thread::sleep(300)
		    
		    if(CoffeeMachineStatus.state.toString() == "0")
		    {
		        logInfo("rules", "Coffee machine OFF")
		        sendCommand(CoffeeMachinePowerButtonPress, ON)
		        
		        Thread::sleep(2000)
		        if(CoffeeMachineStatus.state.toString() == "4"
		            || CoffeeMachineStatus.state.toString() == "5"
		            || CoffeeMachineStatus.state.toString() == "6"
		            || CoffeeMachineStatus.state.toString() == "7"
		            || CoffeeMachineStatus.state.toString() == "12")
		        {
		        	logInfo("rules", "Ready to make coffee")
		        	sendCommand(doCustomCoffee, SmileDetected.state.toString())
		        }
		        else if(CoffeeMachineStatus.state.toString() == "3"
		            || CoffeeMachineStatus.state.toString() == "13")
		        {
		        	logInfo("rules", "Water is warming - wait 10s")
		        	
		        	// Water is warming or purge => wait
		        	Thread::sleep(15000)
		        	if(CoffeeMachineStatus.state.toString() == "4"
		            	|| CoffeeMachineStatus.state.toString() == "5"
		            	|| CoffeeMachineStatus.state.toString() == "6"
		            	|| CoffeeMachineStatus.state.toString() == "7"
		            	|| CoffeeMachineStatus.state.toString() == "12")
		            {
		            	logInfo("rules", "Ready to make coffee")	
			        	sendCommand(doCustomCoffee, SmileDetected.state.toString())
		            }
		            else
		            {
		            	logInfo("rules", "Cannot make coffee - status " + CoffeeMachineStatus.state.toString())
		            	logInfo("rules", " " + executeCommandLine("./configurations/helper_scripts/play_sound.sh ./sounds/error.wav", 1000000))
		            }
		        	
		        }
		        else
		        {
		            logInfo("rules", "Cannot prepare coffee - machine state = " + CoffeeMachineStatus.state.toString())
		            logInfo("rules", " " + executeCommandLine("./configurations/helper_scripts/play_sound.sh ./sounds/error.wav", 1000000))
		        }
		    }   
		    else if(CoffeeMachineStatus.state.toString() == "4"
		            || CoffeeMachineStatus.state.toString() == "5"
		            || CoffeeMachineStatus.state.toString() == "6"
		            || CoffeeMachineStatus.state.toString() == "7"
		            || CoffeeMachineStatus.state.toString() == "12")
		    {
		    		Thread::sleep(300)
		        	sendCommand(doCustomCoffee, SmileDetected.state.toString())
		    }
		    else
		    {
		            logInfo("rules", "Cannot prepare coffee - machine state = " + CoffeeMachineStatus.state.toString())
		            logInfo("rules", " " + executeCommandLine("./configurations/helper_scripts/play_sound.sh ./sounds/error.wav", 1000000))
		    }
	  }
      coffeeOnGoing = false
	}
    
end

rule initialiseSmileItems
when System started
then
    if (SmileDetectedString.state== Uninitialized){
        SmileDetectedString.postUpdate("No smile detected yet")
    }
end